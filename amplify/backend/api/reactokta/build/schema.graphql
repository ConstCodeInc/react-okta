
type Todo {
  id: ID!
  task: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Artist {
  id: ID!
  first_name: String
  talent_genre(filter: ModelArtistGenreFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelArtistGenreConnection
  talent_label(filter: ModelArtistLabelFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelArtistLabelConnection
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  owner: String
}

type Genre @aws_api_key @aws_cognito_user_pools {
  genre: ID!
  talent_genre(filter: ModelArtistGenreFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelArtistGenreConnection
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  owner: String
}

type ArtistGenre {
  id: ID!
  artist_id: ID
  genre_id: ID
  talent: Artist
  genre: Genre
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  owner: String
}

type Label {
  label: ID!
  talent_label(filter: ModelArtistLabelFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelArtistLabelConnection
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  owner: String
}

type ArtistLabel {
  id: ID!
  artist_id: ID
  label_id: ID
  talent: Artist
  label: Label
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  owner: String
}

type Query {
  getArtistsByGenresAndLabels(genreNames: [String]!, labelNames: [String]!): [Artist] @aws_api_key @aws_cognito_user_pools
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  getArtist(id: ID!): Artist
  listArtists(id: ID, filter: ModelArtistFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelArtistConnection
  getArtistGenre(id: ID!): ArtistGenre
  listArtistGenres(id: ID, filter: ModelArtistGenreFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelArtistGenreConnection
  getLabel(label: ID!): Label
  listLabels(label: ID, filter: ModelLabelFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLabelConnection
  getArtistLabel(id: ID!): ArtistLabel
  listArtistLabels(id: ID, filter: ModelArtistLabelFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelArtistLabelConnection
  getArtistGenreByArtistId(artist_id: ID!, sortDirection: ModelSortDirection, filter: ModelArtistGenreFilterInput, limit: Int, nextToken: String): ModelArtistGenreConnection
  getArtistGenreByGenreId(genre_id: ID!, sortDirection: ModelSortDirection, filter: ModelArtistGenreFilterInput, limit: Int, nextToken: String): ModelArtistGenreConnection
  getArtistLabelByArtistId(artist_id: ID!, sortDirection: ModelSortDirection, filter: ModelArtistLabelFilterInput, limit: Int, nextToken: String): ModelArtistLabelConnection
  getArtistLabelByLabelId(label_id: ID!, sortDirection: ModelSortDirection, filter: ModelArtistLabelFilterInput, limit: Int, nextToken: String): ModelArtistLabelConnection
  getGenre(genre: ID!): Genre @aws_api_key @aws_cognito_user_pools
  listGenres(genre: ID, filter: ModelGenreFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelGenreConnection @aws_api_key @aws_cognito_user_pools
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  task: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

input ModelTodoConditionInput {
  task: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

input CreateTodoInput {
  id: ID
  task: String
}

input UpdateTodoInput {
  id: ID!
  task: String
}

input DeleteTodoInput {
  id: ID!
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
  createArtist(input: CreateArtistInput!, condition: ModelArtistConditionInput): Artist
  updateArtist(input: UpdateArtistInput!, condition: ModelArtistConditionInput): Artist
  deleteArtist(input: DeleteArtistInput!, condition: ModelArtistConditionInput): Artist
  createGenre(input: CreateGenreInput!, condition: ModelGenreConditionInput): Genre
  updateGenre(input: UpdateGenreInput!, condition: ModelGenreConditionInput): Genre
  deleteGenre(input: DeleteGenreInput!, condition: ModelGenreConditionInput): Genre
  createArtistGenre(input: CreateArtistGenreInput!, condition: ModelArtistGenreConditionInput): ArtistGenre
  updateArtistGenre(input: UpdateArtistGenreInput!, condition: ModelArtistGenreConditionInput): ArtistGenre
  deleteArtistGenre(input: DeleteArtistGenreInput!, condition: ModelArtistGenreConditionInput): ArtistGenre
  createLabel(input: CreateLabelInput!, condition: ModelLabelConditionInput): Label
  updateLabel(input: UpdateLabelInput!, condition: ModelLabelConditionInput): Label
  deleteLabel(input: DeleteLabelInput!, condition: ModelLabelConditionInput): Label
  createArtistLabel(input: CreateArtistLabelInput!, condition: ModelArtistLabelConditionInput): ArtistLabel
  updateArtistLabel(input: UpdateArtistLabelInput!, condition: ModelArtistLabelConditionInput): ArtistLabel
  deleteArtistLabel(input: DeleteArtistLabelInput!, condition: ModelArtistLabelConditionInput): ArtistLabel
}

input ModelSubscriptionTodoFilterInput {
  id: ModelSubscriptionIDInput
  task: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
}

type Subscription {
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateArtist(filter: ModelSubscriptionArtistFilterInput, owner: String): Artist @aws_subscribe(mutations: ["createArtist"])
  onUpdateArtist(filter: ModelSubscriptionArtistFilterInput, owner: String): Artist @aws_subscribe(mutations: ["updateArtist"])
  onDeleteArtist(filter: ModelSubscriptionArtistFilterInput, owner: String): Artist @aws_subscribe(mutations: ["deleteArtist"])
  onCreateArtistGenre(filter: ModelSubscriptionArtistGenreFilterInput, owner: String): ArtistGenre @aws_subscribe(mutations: ["createArtistGenre"])
  onUpdateArtistGenre(filter: ModelSubscriptionArtistGenreFilterInput, owner: String): ArtistGenre @aws_subscribe(mutations: ["updateArtistGenre"])
  onDeleteArtistGenre(filter: ModelSubscriptionArtistGenreFilterInput, owner: String): ArtistGenre @aws_subscribe(mutations: ["deleteArtistGenre"])
  onCreateLabel(filter: ModelSubscriptionLabelFilterInput, owner: String): Label @aws_subscribe(mutations: ["createLabel"])
  onUpdateLabel(filter: ModelSubscriptionLabelFilterInput, owner: String): Label @aws_subscribe(mutations: ["updateLabel"])
  onDeleteLabel(filter: ModelSubscriptionLabelFilterInput, owner: String): Label @aws_subscribe(mutations: ["deleteLabel"])
  onCreateArtistLabel(filter: ModelSubscriptionArtistLabelFilterInput, owner: String): ArtistLabel @aws_subscribe(mutations: ["createArtistLabel"])
  onUpdateArtistLabel(filter: ModelSubscriptionArtistLabelFilterInput, owner: String): ArtistLabel @aws_subscribe(mutations: ["updateArtistLabel"])
  onDeleteArtistLabel(filter: ModelSubscriptionArtistLabelFilterInput, owner: String): ArtistLabel @aws_subscribe(mutations: ["deleteArtistLabel"])
  onCreateGenre(filter: ModelSubscriptionGenreFilterInput, owner: String): Genre @aws_subscribe(mutations: ["createGenre"]) @aws_api_key @aws_cognito_user_pools
  onUpdateGenre(filter: ModelSubscriptionGenreFilterInput, owner: String): Genre @aws_subscribe(mutations: ["updateGenre"]) @aws_api_key @aws_cognito_user_pools
  onDeleteGenre(filter: ModelSubscriptionGenreFilterInput, owner: String): Genre @aws_subscribe(mutations: ["deleteGenre"]) @aws_api_key @aws_cognito_user_pools
}

type ModelArtistConnection {
  items: [Artist]!
  nextToken: String
}

input ModelArtistFilterInput {
  id: ModelIDInput
  first_name: ModelStringInput
  and: [ModelArtistFilterInput]
  or: [ModelArtistFilterInput]
  not: ModelArtistFilterInput
}

input ModelArtistConditionInput {
  first_name: ModelStringInput
  and: [ModelArtistConditionInput]
  or: [ModelArtistConditionInput]
  not: ModelArtistConditionInput
}

input CreateArtistInput {
  id: ID
  first_name: String
}

input UpdateArtistInput {
  id: ID!
  first_name: String
}

input DeleteArtistInput {
  id: ID!
}

input ModelSubscriptionArtistFilterInput {
  id: ModelSubscriptionIDInput
  first_name: ModelSubscriptionStringInput
  and: [ModelSubscriptionArtistFilterInput]
  or: [ModelSubscriptionArtistFilterInput]
}

type ModelGenreConnection @aws_api_key @aws_cognito_user_pools {
  items: [Genre]!
  nextToken: String
}

input ModelGenreFilterInput {
  genre: ModelIDInput
  and: [ModelGenreFilterInput]
  or: [ModelGenreFilterInput]
  not: ModelGenreFilterInput
}

input ModelGenreConditionInput {
  and: [ModelGenreConditionInput]
  or: [ModelGenreConditionInput]
  not: ModelGenreConditionInput
}

input CreateGenreInput {
  genre: ID!
}

input UpdateGenreInput {
  genre: ID!
}

input DeleteGenreInput {
  genre: ID!
}

input ModelSubscriptionGenreFilterInput {
  genre: ModelSubscriptionIDInput
  and: [ModelSubscriptionGenreFilterInput]
  or: [ModelSubscriptionGenreFilterInput]
}

type ModelArtistGenreConnection @aws_api_key @aws_cognito_user_pools {
  items: [ArtistGenre]!
  nextToken: String
}

input ModelArtistGenreFilterInput {
  id: ModelIDInput
  artist_id: ModelIDInput
  genre_id: ModelIDInput
  and: [ModelArtistGenreFilterInput]
  or: [ModelArtistGenreFilterInput]
  not: ModelArtistGenreFilterInput
}

input ModelArtistGenreConditionInput {
  artist_id: ModelIDInput
  genre_id: ModelIDInput
  and: [ModelArtistGenreConditionInput]
  or: [ModelArtistGenreConditionInput]
  not: ModelArtistGenreConditionInput
}

input CreateArtistGenreInput {
  id: ID
  artist_id: ID
  genre_id: ID
}

input UpdateArtistGenreInput {
  id: ID!
  artist_id: ID
  genre_id: ID
}

input DeleteArtistGenreInput {
  id: ID!
}

input ModelSubscriptionArtistGenreFilterInput {
  id: ModelSubscriptionIDInput
  artist_id: ModelSubscriptionIDInput
  genre_id: ModelSubscriptionIDInput
  and: [ModelSubscriptionArtistGenreFilterInput]
  or: [ModelSubscriptionArtistGenreFilterInput]
}

type ModelLabelConnection {
  items: [Label]!
  nextToken: String
}

input ModelLabelFilterInput {
  label: ModelIDInput
  and: [ModelLabelFilterInput]
  or: [ModelLabelFilterInput]
  not: ModelLabelFilterInput
}

input ModelLabelConditionInput {
  and: [ModelLabelConditionInput]
  or: [ModelLabelConditionInput]
  not: ModelLabelConditionInput
}

input CreateLabelInput {
  label: ID!
}

input UpdateLabelInput {
  label: ID!
}

input DeleteLabelInput {
  label: ID!
}

input ModelSubscriptionLabelFilterInput {
  label: ModelSubscriptionIDInput
  and: [ModelSubscriptionLabelFilterInput]
  or: [ModelSubscriptionLabelFilterInput]
}

type ModelArtistLabelConnection {
  items: [ArtistLabel]!
  nextToken: String
}

input ModelArtistLabelFilterInput {
  id: ModelIDInput
  artist_id: ModelIDInput
  label_id: ModelIDInput
  and: [ModelArtistLabelFilterInput]
  or: [ModelArtistLabelFilterInput]
  not: ModelArtistLabelFilterInput
}

input ModelArtistLabelConditionInput {
  artist_id: ModelIDInput
  label_id: ModelIDInput
  and: [ModelArtistLabelConditionInput]
  or: [ModelArtistLabelConditionInput]
  not: ModelArtistLabelConditionInput
}

input CreateArtistLabelInput {
  id: ID
  artist_id: ID
  label_id: ID
}

input UpdateArtistLabelInput {
  id: ID!
  artist_id: ID
  label_id: ID
}

input DeleteArtistLabelInput {
  id: ID!
}

input ModelSubscriptionArtistLabelFilterInput {
  id: ModelSubscriptionIDInput
  artist_id: ModelSubscriptionIDInput
  label_id: ModelSubscriptionIDInput
  and: [ModelSubscriptionArtistLabelFilterInput]
  or: [ModelSubscriptionArtistLabelFilterInput]
}

