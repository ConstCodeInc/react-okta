# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Todo @model @auth(rules: [{ allow: private }]) {
  id: ID!
  task: String
}

type Artist
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  first_name: String
  talent_genre: [ArtistGenre]
    @hasMany(indexName: "byArtistGenreByArtistId", fields: ["id"])
  talent_label: [ArtistLabel]
    @hasMany(indexName: "byArtistLabelByArtistId", fields: ["id"])
}
type ArtistConnection @aws_api_key {
  getArtistsByGenresAndLabels: [Artist]
  nextToken: String
}

type Genre
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  genre: ID! @index(name: "byGenreByGenre", queryField: "getGenreByGenre")
  talent_genre: [ArtistGenre]
    @hasMany(indexName: "byArtistGenreByGenreId", fields: ["genre"])
}
type GenreConnection @aws_api_key {
  getGenresByName: [Genre]
  nextToken: String
}

type ArtistGenre
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  artist_id: ID
    @index(
      name: "byArtistGenreByArtistId"
      queryField: "getArtistGenreByArtistId"
    )
  genre_id: ID
    @index(
      name: "byArtistGenreByGenreId"
      queryField: "getArtistGenreByGenreId"
    )
  talent: Artist @belongsTo(fields: ["artist_id"])
  genre: Genre @belongsTo(fields: ["genre_id"])
}

type Label
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  label: ID! @index(name: "byLabelByLabel", queryField: "getLabelByLabel")
  talent_label: [ArtistLabel]
    @hasMany(indexName: "byArtistLabelByLabelId", fields: ["label"])
}

type ArtistLabel
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  artist_id: ID
    @index(
      name: "byArtistLabelByArtistId"
      queryField: "getArtistLabelByArtistId"
    )
  label_id: ID
    @index(
      name: "byArtistLabelByLabelId"
      queryField: "getArtistLabelByLabelId"
    )
  talent: Artist @belongsTo(fields: ["artist_id"])
  label: Label @belongsTo(fields: ["label_id"])
}

type LabelConnection @aws_api_key {
  getLabelsByName: [Label]
  nextToken: String
}

type ArtistGenreConnection @aws_api_key {
  getArtistIdsByGenre: [ArtistGenre]
  nextToken: String
}

type ArtistLabelConnection @aws_api_key {
  getArtistIdsByLabel: [ArtistLabel]
  nextToken: String
}

type ArtistIdsConnection @aws_api_key {
  getArtistsByIds: [Artist]
  nextToken: String
}

type Query {
  # getArtistsByGenresAndLabels(genreNames: [String]!, labelNames: [String]!): [Artist] @aws_api_key @aws_cognito_user_pools
  getGenresByName(
    genreNames: [String]!
    limit: Int
    nextToken: String
  ): GenreConnection @aws_api_key

  getLabelsByName(
    labelNames: [String]!
    limit: Int
    nextToken: String
  ): LabelConnection @aws_api_key

  getArtistIdsByGenre(
    ids: [String]!
    limit: Int
    nextToken: String
  ): ArtistGenreConnection @aws_api_key

  getArtistIdsByLabel(
    ids: [String]!
    limit: Int
    nextToken: String
  ): ArtistLabelConnection @aws_api_key

  getArtistsByIds(
    ids: [String]!
    limit: Int
    nextToken: String
  ): ArtistIdsConnection @aws_api_key

  getArtistsByGenresAndLabels(
    genreNames: [String]!
    labelNames: [String]!
    limit: Int
    nextToken: String
  ): ArtistConnection @function(name: "artistProcessor-${env}") @aws_api_key
}
