# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Todo @model @auth(rules: [{ allow: private }]) {
  id: ID!
  task: String
}

type Artist
@model
(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
@auth(
  rules: [
    { allow: owner },
    { allow: groups, groups: ["Admin"] },
    { allow: private, operations: [read] }
  ]
)
{
  id: ID! @primaryKey
  first_name: String
  talent_genre: [ArtistGenre] @hasMany(indexName: "byArtistGenreByArtistId", fields: ["id"])
  talent_label: [ArtistLabel] @hasMany(indexName: "byArtistLabelByArtistId", fields: ["id"])
}

type Genre
@model
# @primaryKey(fields: ["genre"], name: "byGenreByGenre", queryField: "getGenreByGenre")
(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
@auth(
  rules: [
    { allow: owner },
    { allow: groups, groups: ["Admin"] },
    { allow: public, operations: [read] },
    { allow: private, operations: [read] }
  ]
)
{
  # id: ID!
  genre: ID! @primaryKey
  talent_genre: [ArtistGenre] @hasMany(indexName: "byArtistGenreByGenreId", fields: ["genre"])
}

type ArtistGenre
@model
(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
@auth(
  rules: [
    { allow: owner },
    { allow: groups, groups: ["Admin"] },
    { allow: private, operations: [read] }
  ]
)
{
  id: ID! @primaryKey
  artist_id: ID @index(name: "byArtistGenreByArtistId", queryField: "getArtistGenreByArtistId")
  genre_id: ID @index(name: "byArtistGenreByGenreId", queryField: "getArtistGenreByGenreId")
  talent: Artist @belongsTo(fields: ["artist_id"])
  genre: Genre @belongsTo(fields: ["genre_id"])
}

type Label
@model
# @primaryKey(fields: ["label"], name: "byLabelByLabel", queryField: "getLabelByLabel")
(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
@auth(
  rules: [
    { allow: owner },
    { allow: groups, groups: ["Admin"] },
    { allow: private, operations: [read] }
  ]
)
{
  # id: ID! @primaryKey
  label: ID! @primaryKey
  talent_label: [ArtistLabel] @hasMany(indexName: "byArtistLabelByLabelId", fields: ["label"])
}

type ArtistLabel
@model
(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
@auth(
  rules: [
    { allow: owner },
    { allow: groups, groups: ["Admin"] },
    { allow: private, operations: [read] }
  ]
)
{
  id: ID! @primaryKey
  artist_id: ID @index(name: "byArtistLabelByArtistId", queryField: "getArtistLabelByArtistId")
  label_id: ID @index(name: "byArtistLabelByLabelId", queryField: "getArtistLabelByLabelId")
  talent: Artist @belongsTo(fields: ["artist_id"])
  label: Label @belongsTo(fields: ["label_id"])
}

type Query 
{
  getArtistsByGenresAndLabels(genreNames: [String]!, labelNames: [String]!): [Artist] @aws_api_key @aws_cognito_user_pools
}
